{"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"hjKlIWcPjahF"},"source":["# == CNN for binary Classification using only baseline batches ==\n","\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":85},"colab_type":"code","executionInfo":{"elapsed":2331,"status":"ok","timestamp":1590222195796,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"-VM7Q_HUj0rf","outputId":"ff969b10-d49f-4438-dfc0-e92841542ce9"},"outputs":[{"name":"stdout","output_type":"stream","text":["TensorFlow 1.x selected.\n","1.15.2\n","2.2.4-tf\n"]},{"name":"stderr","output_type":"stream","text":["Using TensorFlow backend.\n"]}],"source":["# Computational Intelligence Project\n","# Dipartimento di Ingegneria dell´Informazione , Universita´ di Pisa\n","# Authors: Rachele Nebbia Colomba, Alessandro Gentili, Giorgio Simonini\n","#    begin                : June 2020\n","#    copyright            : (C)  2020 Universita´ di pisa    \n","#    email                : rachelenebbia <at> gmail <dot> com\n","\n","\n","#Here: we associated baselines with the related abnormality labels and we provided themas input to the network model we previously used in Task_binary_2. \n","#Idea: verify if it possible to distinguish between masses and calcification by using the correspondant baseline patches in the training process --> \n","      #this can explain why classification does not improve in two-channel CNN   \n","\n","# Import libraries \n","%tensorflow_version 1.x\n","import tensorflow as tf\n","print(tf.__version__)\n","from tensorflow import keras\n","print(keras.__version__)\n","from tensorflow.keras import models\n","from tensorflow.keras import layers\n","from tensorflow.keras import optimizers\n","from tensorflow.keras.utils import to_categorical\n","from keras.callbacks import EarlyStopping\n","from keras.callbacks import ModelCheckpoint\n","from sklearn.metrics import confusion_matrix\n","from sklearn import metrics\n","import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import random as rnd\n","from google.colab import drive\n","from tensorflow.keras.models import load_model\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{},"colab_type":"code","id":"_ka8a7nIIPj3"},"outputs":[],"source":["\n","#Function to shuffle the tuples and have random order of the classes in training dataset\n","def mischia(img,lab):\n","    z=list(zip(img,lab)) #zip returns an iterator instead and needs to be passed to a list function to get the zipped tuples\n","    rnd.shuffle(z) #random shuffle of the tuples\n","    img2,lab2=zip(*z) #unzipping, it obtaines the original form \n","    img2=np.asarray(img2)\n","    lab2=np.asarray(lab2)\n","    return img2,lab2"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"colab_type":"code","executionInfo":{"elapsed":2303,"status":"ok","timestamp":1590222195798,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"86OPLBMulHxs","outputId":"2c427d7a-8903-48c3-86e4-d4ac56f99c7b"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}],"source":["# Import data\n","drive.mount('/content/drive/')\n","\n","dir_numpy =\"/content/drive/My Drive/Computational/numpy data\"\n","dir_nets =\"/content/drive/My Drive/Computational/networks\"\n","dir_check =\"/content/drive/My Drive/Computational/networks\""]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":547},"colab_type":"code","executionInfo":{"elapsed":3350,"status":"ok","timestamp":1590222196861,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"P8m3sw1lqX_q","outputId":"030c0ecf-72ad-4e89-d574-9e8aef428931"},"outputs":[{"data":{"image/png":"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","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["5352 images\n"]},{"data":{"image/png":"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","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["2676 images\n"]}],"source":["# Load tensor for Training Dataset (images+labels) and Testing Dataset (images+labels)\n","train_img = np.load(os.path.join(dir_numpy,'train_tensor.npy'))\n","train_lab = np.load(os.path.join(dir_numpy,'train_labels.npy'))\n","test_img = np.load(os.path.join(dir_numpy,'public_test_tensor.npy'))\n","test_lab = np.load(os.path.join(dir_numpy,'public_test_labels.npy'))\n","\n","# Plot histogram to visualize classes distribution of Dataset\n","plt.hist(train_lab)\n","plt.show()\n","print(len(train_lab), \"images\")\n","\n","# # Here define new tensors to divide between massesn and calcifications:\n","# Labels legend --> 2 = masses, 4 = calcifications.\n","n_img=len(train_img)\n","train_img_4b=train_img[0:n_img:2]\n","n_img_test=len(test_img)\n","test_img_4b=test_img[0:n_img_test:2]\n","# labels\n","train_lab_4b=train_lab[1:n_img:2]\n","test_lab_4b=test_lab[1:n_img_test:2]\n","n_img4b=len(train_img_4b)\n","\n","# Processing: reassign labels to have mass = 0, calcification = 1\n","for i in range(0,n_img4b):\n","    if ((train_lab_4b[i] == 1) or (train_lab_4b[i] == 2)):\n","        train_lab_4b[i] = 0\n","    elif ((train_lab_4b[i] == 3) or (train_lab_4b[i] == 4)):\n","        train_lab_4b[i] = 1\n","n_img4b_test=len(test_img_4b)\n","for i in range(0,n_img4b_test):\n","    if ((test_lab_4b[i] == 1) or (test_lab_4b[i] == 2)):\n","        test_lab_4b[i] = 0\n","    elif ((test_lab_4b[i] == 3) or (test_lab_4b[i] == 4)):\n","        test_lab_4b[i] = 1\n","#Plot histogram to visualize data distribution \n","plt.hist(train_lab_4b)\n","plt.show()\n","print(len(train_lab_4b), \"images\")"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":666},"colab_type":"code","executionInfo":{"elapsed":3330,"status":"ok","timestamp":1590222196862,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"8nj-sQAOG9Zd","outputId":"40076623-5aa5-4c66-97a3-1707b7db48ce"},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n","Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d (Conv2D)              (None, 148, 148, 32)      320       \n","_________________________________________________________________\n","conv2d_1 (Conv2D)            (None, 146, 146, 32)      9248      \n","_________________________________________________________________\n","max_pooling2d (MaxPooling2D) (None, 48, 48, 32)        0         \n","_________________________________________________________________\n","conv2d_2 (Conv2D)            (None, 46, 46, 64)        18496     \n","_________________________________________________________________\n","conv2d_3 (Conv2D)            (None, 44, 44, 64)        36928     \n","_________________________________________________________________\n","max_pooling2d_1 (MaxPooling2 (None, 14, 14, 64)        0         \n","_________________________________________________________________\n","conv2d_4 (Conv2D)            (None, 12, 12, 128)       73856     \n","_________________________________________________________________\n","conv2d_5 (Conv2D)            (None, 10, 10, 128)       147584    \n","_________________________________________________________________\n","max_pooling2d_2 (MaxPooling2 (None, 3, 3, 128)         0         \n","_________________________________________________________________\n","flatten (Flatten)            (None, 1152)              0         \n","_________________________________________________________________\n","dropout (Dropout)            (None, 1152)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 512)               590336    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 513       \n","=================================================================\n","Total params: 877,281\n","Trainable params: 877,281\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["# Design of NN neutwork\n","# Add convolutional, pooling and dense layers\n","model = models.Sequential()\n","model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 1)))\n","model.add(layers.Conv2D(32, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((3, 3)))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.Conv2D(64, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((3, 3)))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.Conv2D(128, (3, 3), activation='relu'))\n","model.add(layers.MaxPooling2D((3, 3)))\n","model.add(layers.Flatten())\n","model.add(layers.Dropout(0.2))\n","model.add(layers.Dense(512, activation='relu'))\n","model.add(layers.Dense(1, activation='sigmoid'))\n","model.summary()"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":3317,"status":"ok","timestamp":1590222196864,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"ZI_iRs00IM_2","outputId":"746a4165-c552-4a43-8010-bc86f2ee37f2"},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/nn_impl.py:183: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n"]}],"source":["#Compile CNN with optimizer and chosen metric \n","model.compile(loss='binary_crossentropy',\n","              optimizer='adam',\n","              metrics=['acc'])"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":299},"colab_type":"code","executionInfo":{"elapsed":5415,"status":"ok","timestamp":1590222198977,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"7-o1OdDhIT17","outputId":"fec51c1a-910a-4f2d-bb22-9f6f2f394da7"},"outputs":[{"name":"stdout","output_type":"stream","text":["float32\n"]},{"data":{"image/png":"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","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"},{"data":{"text/plain":["(336, 150, 150, 1)"]},"execution_count":7,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["\n","# Normalize train and test images \n","train_img_4b = train_img_4b.astype('float32') / 65535\n","test_img_4b = test_img_4b.astype('float32') / 65535\n","\n","# Visualize processing\n","print(train_img_4b[5,:].dtype) # check the type\n","plt.hist(train_img_4b[5,:]) # check the value range and the distribution\n","plt.show()\n","\n","# reshape datasets\n","train_img_4b = train_img_4b.reshape((n_img4b, 150, 150, 1))\n","test_img_4b = test_img_4b.reshape((n_img4b_test, 150, 150, 1))\n","\n","test_img_4b.shape"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"colab_type":"code","executionInfo":{"elapsed":5401,"status":"ok","timestamp":1590222198979,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"UK2ztDhoIr1j","outputId":"901c7aa8-6bbe-4352-ac43-a1ff0cbbcbe4"},"outputs":[{"data":{"text/plain":["(2676,)"]},"execution_count":8,"metadata":{"tags":[]},"output_type":"execute_result"}],"source":["# reshap train dataset into vector\n","train_lab_4b.shape"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":5386,"status":"ok","timestamp":1590222198982,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"_AiWvIftIvpA","outputId":"082f1c45-588e-4f04-95b3-797eedc6849a"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n"," 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"]}],"source":["# Visualize labels for first 100 samples\n","train_lab_4b.shape\n","print(train_lab_4b[0:100])"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","executionInfo":{"elapsed":5371,"status":"ok","timestamp":1590222198984,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"3oH17fBYF2c7","outputId":"5d372077-519f-4fa9-b222-485d6fb98b8b"},"outputs":[{"name":"stdout","output_type":"stream","text":["[1 0 1 0 1 0 1 0 1 1 1 1 1 0 0 0 0 0 1 0 1 1 0 1 0 1 0 0 1 1 0 0 1 1 0 1 1\n"," 1 0 1 1 1 1 0 0 0 0 0 0 1 0 1 1 1 0 0 0 1 1 0 1 0 1 1 0 1 0 0 1 1 0 0 0 1\n"," 0 0 0 0 0 0 1 1 0 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 1 1]\n"]}],"source":["# Shuffle samples to have random order of classes\n","train_img_4b, train_lab_4b = mischia(train_img_4b, train_lab_4b)\n","train_lab_4b.shape\n","# Visualize first 100 samples after shuffling \n","print(train_lab_4b[0:100])"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"colab_type":"code","executionInfo":{"elapsed":65128,"status":"ok","timestamp":1590222258758,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"1ak9prekIzvz","outputId":"788fafbd-809b-447b-c48a-82657f08d960"},"outputs":[{"name":"stdout","output_type":"stream","text":["Train on 2274 samples, validate on 402 samples\n","Epoch 1/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6933 - acc: 0.5239\n","Epoch 00001: val_acc improved from -inf to 0.56219, saving model to /content/drive/My Drive/Computational/networks/checkpoint4b\n","2274/2274 [==============================] - 5s 2ms/sample - loss: 0.6921 - acc: 0.5308 - val_loss: 0.6854 - val_acc: 0.5622\n","Epoch 2/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6911 - acc: 0.5424\n","Epoch 00002: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6910 - acc: 0.5418 - val_loss: 0.6860 - val_acc: 0.5622\n","Epoch 3/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6861 - acc: 0.5380\n","Epoch 00003: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 584us/sample - loss: 0.6844 - acc: 0.5418 - val_loss: 0.6731 - val_acc: 0.5622\n","Epoch 4/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6830 - acc: 0.5409\n","Epoch 00004: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 582us/sample - loss: 0.6830 - acc: 0.5418 - val_loss: 0.6779 - val_acc: 0.5622\n","Epoch 5/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6899 - acc: 0.5404\n","Epoch 00005: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6896 - acc: 0.5418 - val_loss: 0.6792 - val_acc: 0.5622\n","Epoch 6/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6839 - acc: 0.5390\n","Epoch 00006: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 581us/sample - loss: 0.6835 - acc: 0.5418 - val_loss: 0.6760 - val_acc: 0.5622\n","Epoch 7/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6831 - acc: 0.5400\n","Epoch 00007: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 581us/sample - loss: 0.6825 - acc: 0.5418 - val_loss: 0.6736 - val_acc: 0.5622\n","Epoch 8/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6791 - acc: 0.5463\n","Epoch 00008: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 583us/sample - loss: 0.6797 - acc: 0.5418 - val_loss: 0.6714 - val_acc: 0.5622\n","Epoch 9/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6776 - acc: 0.5448\n","Epoch 00009: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 578us/sample - loss: 0.6785 - acc: 0.5418 - val_loss: 0.6752 - val_acc: 0.5622\n","Epoch 10/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6781 - acc: 0.5404\n","Epoch 00010: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 582us/sample - loss: 0.6770 - acc: 0.5418 - val_loss: 0.6681 - val_acc: 0.5622\n","Epoch 11/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6739 - acc: 0.5424\n","Epoch 00011: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 575us/sample - loss: 0.6737 - acc: 0.5413 - val_loss: 0.6752 - val_acc: 0.5622\n","Epoch 12/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6772 - acc: 0.5424\n","Epoch 00012: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6752 - acc: 0.5422 - val_loss: 0.6725 - val_acc: 0.5622\n","Epoch 13/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6737 - acc: 0.5434\n","Epoch 00013: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 580us/sample - loss: 0.6740 - acc: 0.5427 - val_loss: 0.6717 - val_acc: 0.5622\n","Epoch 14/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6754 - acc: 0.5409\n","Epoch 00014: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 578us/sample - loss: 0.6743 - acc: 0.5413 - val_loss: 0.6708 - val_acc: 0.5622\n","Epoch 15/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6752 - acc: 0.5448\n","Epoch 00015: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 581us/sample - loss: 0.6737 - acc: 0.5418 - val_loss: 0.6713 - val_acc: 0.5622\n","Epoch 16/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6712 - acc: 0.5448\n","Epoch 00016: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6721 - acc: 0.5418 - val_loss: 0.6729 - val_acc: 0.5622\n","Epoch 17/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6713 - acc: 0.5473\n","Epoch 00017: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 581us/sample - loss: 0.6708 - acc: 0.5427 - val_loss: 0.6693 - val_acc: 0.5622\n","Epoch 18/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6708 - acc: 0.5463\n","Epoch 00018: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 582us/sample - loss: 0.6719 - acc: 0.5418 - val_loss: 0.6687 - val_acc: 0.5622\n","Epoch 19/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6726 - acc: 0.5434\n","Epoch 00019: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 578us/sample - loss: 0.6712 - acc: 0.5422 - val_loss: 0.6727 - val_acc: 0.5622\n","Epoch 20/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6710 - acc: 0.5375\n","Epoch 00020: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6695 - acc: 0.5418 - val_loss: 0.6660 - val_acc: 0.5622\n","Epoch 21/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6718 - acc: 0.5253\n","Epoch 00021: val_acc did not improve from 0.56219\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6714 - acc: 0.5202 - val_loss: 0.6734 - val_acc: 0.5547\n","Epoch 22/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6712 - acc: 0.5361\n","Epoch 00022: val_acc improved from 0.56219 to 0.56468, saving model to /content/drive/My Drive/Computational/networks/checkpoint4b\n","2274/2274 [==============================] - 2s 779us/sample - loss: 0.6714 - acc: 0.5352 - val_loss: 0.6752 - val_acc: 0.5647\n","Epoch 23/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6712 - acc: 0.5390\n","Epoch 00023: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6707 - acc: 0.5422 - val_loss: 0.6688 - val_acc: 0.5622\n","Epoch 24/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6685 - acc: 0.5414\n","Epoch 00024: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 584us/sample - loss: 0.6710 - acc: 0.5418 - val_loss: 0.6698 - val_acc: 0.5622\n","Epoch 25/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6705 - acc: 0.5409\n","Epoch 00025: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6693 - acc: 0.5453 - val_loss: 0.6703 - val_acc: 0.5622\n","Epoch 26/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6697 - acc: 0.5390\n","Epoch 00026: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 581us/sample - loss: 0.6697 - acc: 0.5418 - val_loss: 0.6691 - val_acc: 0.5622\n","Epoch 27/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6688 - acc: 0.5390\n","Epoch 00027: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 582us/sample - loss: 0.6671 - acc: 0.5422 - val_loss: 0.6648 - val_acc: 0.5647\n","Epoch 28/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6706 - acc: 0.5478\n","Epoch 00028: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6700 - acc: 0.5479 - val_loss: 0.6670 - val_acc: 0.5622\n","Epoch 29/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6644 - acc: 0.5463\n","Epoch 00029: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 576us/sample - loss: 0.6660 - acc: 0.5427 - val_loss: 0.6651 - val_acc: 0.5547\n","Epoch 30/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6664 - acc: 0.5414\n","Epoch 00030: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6659 - acc: 0.5449 - val_loss: 0.6701 - val_acc: 0.5572\n","Epoch 31/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6695 - acc: 0.5361\n","Epoch 00031: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6673 - acc: 0.5387 - val_loss: 0.6668 - val_acc: 0.5647\n","Epoch 32/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6660 - acc: 0.5570\n","Epoch 00032: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 574us/sample - loss: 0.6662 - acc: 0.5484 - val_loss: 0.6699 - val_acc: 0.5647\n","Epoch 33/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6714 - acc: 0.5400\n","Epoch 00033: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 574us/sample - loss: 0.6704 - acc: 0.5409 - val_loss: 0.6732 - val_acc: 0.5522\n","Epoch 34/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6706 - acc: 0.5424\n","Epoch 00034: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6706 - acc: 0.5387 - val_loss: 0.6722 - val_acc: 0.5647\n","Epoch 35/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6700 - acc: 0.5458\n","Epoch 00035: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6697 - acc: 0.5418 - val_loss: 0.6706 - val_acc: 0.5622\n","Epoch 36/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6681 - acc: 0.5419\n","Epoch 00036: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6677 - acc: 0.5431 - val_loss: 0.6682 - val_acc: 0.5622\n","Epoch 37/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6658 - acc: 0.5409\n","Epoch 00037: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 578us/sample - loss: 0.6674 - acc: 0.5427 - val_loss: 0.6674 - val_acc: 0.5622\n","Epoch 38/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6676 - acc: 0.5448\n","Epoch 00038: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 579us/sample - loss: 0.6675 - acc: 0.5431 - val_loss: 0.6687 - val_acc: 0.5622\n","Epoch 39/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6687 - acc: 0.5370\n","Epoch 00039: val_acc did not improve from 0.56468\n","2274/2274 [==============================] - 1s 577us/sample - loss: 0.6674 - acc: 0.5431 - val_loss: 0.6675 - val_acc: 0.5647\n","Epoch 40/40\n","2052/2274 [==========================>...] - ETA: 0s - loss: 0.6684 - acc: 0.5478\n","Epoch 00040: val_acc improved from 0.56468 to 0.56965, saving model to /content/drive/My Drive/Computational/networks/checkpoint4b\n","2274/2274 [==============================] - 2s 835us/sample - loss: 0.6676 - acc: 0.5453 - val_loss: 0.6717 - val_acc: 0.5697\n"]}],"source":["# Start training with Ccheckpoint, number of epochs and validation split definition \n","file_check =\"/content/drive/My Drive/Computational/networks/checkpoint4b\"\n","es = EarlyStopping(monitor='val_acc', mode='max', verbose=1, patience=10)\n","checkpoint = ModelCheckpoint(file_check, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\n","history = model.fit(train_img_4b, \n","                    train_lab_4b, \n","                    epochs=40, \n","                    batch_size=228,\n","                    validation_split=0.15,\n","                    shuffle = True,\n","                    callbacks=[checkpoint])"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"colab_type":"code","executionInfo":{"elapsed":65112,"status":"ok","timestamp":1590222258760,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"zvEO084dJnI6","outputId":"adbe8ac4-d231-4bb9-802a-985ae73125c9"},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"},{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"}],"source":["# Visualize results\n","acc = history.history['acc']\n","val_acc = history.history['val_acc']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","epochs = range(len(acc))\n","\n","# Plot training and validation accuracy \n","plt.plot(epochs, acc, 'r', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","# Plot training and validation loss\n","plt.plot(epochs, loss, 'r', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"colab_type":"code","executionInfo":{"elapsed":65097,"status":"ok","timestamp":1590222258762,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"o4-B0c8bYxKF","outputId":"64702b43-0b5c-4467-d644-0f4f31d71a55"},"outputs":[{"name":"stdout","output_type":"stream","text":["336/336 [==============================] - 0s 608us/sample - loss: 0.9121 - acc: 0.4970\n"]}],"source":["# Evaluate results on Test Dataset\n","test_loss, test_acc = model.evaluate(test_img_4b, test_lab_4b)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{},"colab_type":"code","id":"mCYo_h_ZI_SZ"},"outputs":[],"source":["#ckmodel.save(os.path.join(dir_nets,\"net_4b.h5\"))"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":119},"colab_type":"code","executionInfo":{"elapsed":65367,"status":"ok","timestamp":1590222259059,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"8y5rQulQQEmf","outputId":"1fc67b7e-a480-41c9-dfad-12d73b96f50c"},"outputs":[{"name":"stdout","output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/init_ops.py:97: calling GlorotUniform.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/init_ops.py:97: calling Zeros.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Call initializer instance with the dtype argument instead of passing it to the constructor\n"]}],"source":["ckmodel = load_model(os.path.join(dir_check,\"checkpoint4b\"))"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"colab_type":"code","executionInfo":{"elapsed":65357,"status":"ok","timestamp":1590222259060,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"Be9mTHljQ_qE","outputId":"edac01ad-b1ce-42ea-a4d5-4cd9a70e7bd8"},"outputs":[{"name":"stdout","output_type":"stream","text":["336/336 [==============================] - 0s 389us/sample - loss: 0.9121 - acc: 0.4970\n"]}],"source":["test_loss, test_acc = ckmodel.evaluate(test_img_4b, test_lab_4b)"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"colab_type":"code","executionInfo":{"elapsed":66225,"status":"ok","timestamp":1590222259943,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"7qD0vTu8E8rw","outputId":"235e0f63-1289-4b68-b56e-f378312ab208"},"outputs":[{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAesAAAHCCAYAAADPUOFfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3debgdVZWw8XclEQQZAgQQEiYhioiCMR0BG0TRNgh2UFGiiEjTjQOKn7QDOIEDaqvdiorSKEMEmlFREGRoFFEbkHmegoAkBAhEMEyBJOv7o+rCSUzuvbn3DJWd98dzHs6pae86yZN11qpduyIzkSRJzTWi1x2QJEn9M1hLktRwBmtJkhrOYC1JUsMZrCVJajiDtSRJDWewllpExCoRcU5EPBYRZwzjOHtHxIXt7FuvRMSOEXF7r/shrcjC+6y1PIqI9wIHA1sCc4HrgCMy8w/DPO4+wMeAHTJz/rA72nARkcD4zJze675IWjozay13IuJg4LvA14D1gY2BHwJT2nD4TYA7VoRAPRgRMarXfZBksNZyJiLWBL4MHJiZP8/MJzLz2cw8JzM/VW+zckR8NyLur1/fjYiV63U7R8SMiPj3iHgoImZFxH71ui8BXwT2iojHI2L/iDg8Ik5qaX/TiMi+IBYRH4iIP0fE3Ii4OyL2bln+h5b9doiIK+vy+pURsUPLuksi4isR8cf6OBdGxJilnH9f/z/d0v89IuKtEXFHRMyJiM+2bD8pIi6LiEfrbX8QESvV6y6tN7u+Pt+9Wo7/mYh4ADi+b1m9z+Z1GxPqzxtGxOyI2HlYf7CS+mWw1vJme+CFwFn9bPM5YDtgW2AbYBLw+Zb1LwbWBMYC+wNHRcRamXkYVbZ+WmaulpnH9teRiHgR8D1g18xcHdiBqhy/+HZrA+fW264D/BdwbkSs07LZe4H9gPWAlYBP9tP0i6m+g7FUPy5+DLwPeA2wI/CFiNis3nYB8AlgDNV3twvwEYDM3KneZpv6fE9rOf7aVFWGA1obzsy7gM8AJ0XEqsDxwLTMvKSf/koaJoO1ljfrAA8PUKbeG/hyZj6UmbOBLwH7tKx/tl7/bGaeBzwOvGyI/VkIbB0Rq2TmrMy8eQnb7AbcmZknZub8zDwFuA14W8s2x2fmHZn5FHA61Q+NpXmW6vr8s8CpVIH4yMycW7d/C9WPFDLz6sy8vG73HuC/gdcP4pwOy8x5dX8WkZk/BqYDVwAbUP04ktRBBmstbx4BxgxwLXVD4N6Wz/fWy547xmLB/klgtWXtSGY+AewFfAiYFRHnRsSWg+hPX5/Gtnx+YBn680hmLqjf9wXTB1vWP9W3f0S8NCJ+FREPRMTfqCoHSyyxt5idmU8PsM2Pga2B72fmvAG2lTRMBmstby4D5gF79LPN/VQl3D4b18uG4glg1ZbPL25dmZkXZOabqTLM26iC2ED96evTzCH2aVn8iKpf4zNzDeCzQAywT7+3iETEalQD/I4FDq/L/JI6yGCt5UpmPkZ1nfaoemDVqhHxgojYNSK+WW92CvD5iFi3Hqj1ReCkpR1zANcBO0XExvXgtkP7VkTE+hExpb52PY+qnL5wCcc4D3hpRLw3IkZFxF7AVsCvhtinZbE68Dfg8Trr//Bi6x8EXrKMxzwSuCoz/5XqWvzRw+6lpH4ZrLXcycz/pLrH+vPAbOA+4KPAL+pNvgpcBdwA3AhcUy8bSlsXAafVx7qaRQPsiLof9wNzqK4FLx4MycxHgN2Bf6cq438a2D0zHx5Kn5bRJ6kGr82lyvpPW2z94cC0erT4uwc6WERMASbz/HkeDEzoGwUvqTOcFEWSpIYzs5YkqeEM1pIkNZzBWpKkhjNYS5LUcAZrSZIarlFP1Fl7nTG50caLzx0hlevG2+/rdRekrsln5pLznxpoUp62GLnGJpnz/2623CHJp2ZfkJmT23KwIWpUsN5o400477eX9bobUtds8YaDe90FqWvm3X5619rK+U+x8ssGnDpgUJ6+7qiBpujtuEYFa0mS2iMgyrnSa7CWJJUngOhKxb0ryvnZIUlSocysJUllsgwuSVLDWQaXJEndYmYtSSqQo8ElSWo+y+CSJKlbzKwlSeUJLINLktRsYRlckiR1j5m1JKlMlsElSWo4y+CSJKlbzKwlSQVyUhRJkpqtsEdkGqwlSWUqKLMu50wkSSqUmbUkqUBes5YkqflGlHPNupyfHZIkFcrMWpJUHh/kIUnScqCgW7fK+dkhSVKhzKwlSQVyNLgkSc1nGVySJHWLmbUkqUyWwSVJarAIy+CSJKl7zKwlSWWyDC5JUsNZBpckSd1iZi1JKpCTokiS1HyWwSVJUreYWUuSyuMjMiVJarqyrlmXcyaSJBXKzFqSVKaCBpgZrCVJZbIMLkmSusXMWpJUJsvgkiQ1WJQ1GtxgLUkqU0GZdTk/OyRJKpSZtSSpSFFQZm2wliQVJygrWFsGlySp4cysJUnlifpVCIO1JKlAYRlckiR1j5m1JKlIJWXWBmtJUpFKCtaWwSVJajgza0lSkUrKrA3WkqTyFHbrlmVwSZIazsxaklSc8D5rSZKaLyLa8hpEO8dFxEMRcVPLsm9FxG0RcUNEnBURo1vWHRoR0yPi9oh4y2DOxWAtSdLwnABMXmzZRcDWmfkq4A7gUICI2AqYCryi3ueHETFyoAYM1pKkInUrs87MS4E5iy27MDPn1x8vB8bV76cAp2bmvMy8G5gOTBqoDa9ZS5KK1KBr1v8CnFa/H0sVvPvMqJf1y2AtSVL/xkTEVS2fj8nMYwazY0R8DpgPnDycDhisJUnlae991g9n5sRl7kLEB4DdgV0yM+vFM4GNWjYbVy/rl9esJUlF6tY166W0PRn4NPDPmflky6qzgakRsXJEbAaMB/400PHMrCVJGoaIOAXYmapcPgM4jGr098rARXXAvzwzP5SZN0fE6cAtVOXxAzNzwUBtGKwlScXp5qQomfmeJSw+tp/tjwCOWJY2DNaSpCI1aDT4sHnNWpKkhjOzliSVqZzE2mAtSSpQlFUGN1hLkopUUrD2mrUkSQ1nZi1JKlJJmbXBWpJUnG7eZ90NlsElSWo4M2tJUpnKSawN1pKkAhV265ZlcEmSGs7MWpJUpJIya4O1JKlIJQVry+CSJDWcmbUkqUzlJNYG6xXRggULeOsbtufFG2zItNN+wV/uvZuP7L8Pf53zCK/adgJHHn08K620Uq+7KQ3J0Yftza47bc3sOXOZ+K6vAfDFj+zG7q9/FQszmT1nLgccdhKzZj/G6NVX4b8Pfx+bjRvDvGee5YOHn8wtd83q8RmoXSyDa7l27NHfZ4uXbvnc568d/jn+7cMH8cdrbmXNNUdz6onH97B30vCceM7lTDnwqEWWfWfaxUza6+tsN/Ub/Pr3N3HoAbsC8On938L1t89g0l5fZ/8vnMi3P7VnL7osDchgvYK5f+YMLr7w17z3/fsBkJn88dJL2G3KOwB413v24YLzzu5lF6Vh+eM1dzHnsScXWTb3iaefe7/qKiuTmQBs+ZIX87sr7wDgjnseZJMN12a9tVfvXmfVMRHRtlcTWAZfwRz+2U/yuS99nccfnwvAX+c8whprrsmoUdVfhQ02HMsD99/fyy5KHXH4gW9j790n8djjTzH5gO8BcOMdM5nyxm3447V3MfEVm7DxBmszdv3RPDRnbo97q3ZoSqBth45m1hExOSJuj4jpEXFIJ9vSwP73/HMZM2ZdXrXthF53Req6w486h/G7foFTf30VH9prJwC+ffxFrLn6qlx+6iF8eOrruf72GSxYsLDHPZX+Xscy64gYCRwFvBmYAVwZEWdn5i2dalP9u/KKy7jw/HP5zUUXMG/e08yd+ze+eMi/87fHHmP+/PmMGjWKWffP5MUbbtjrrkodc9p5V3LW9z/MV48+j7lPPM0HDz/puXW3nfsl7p75SA97p3Yysx6cScD0zPxzZj4DnApM6WB7GsChh32Vq27+M5ffcAdHHXsir9txZ37w42nssOPrOfeXPwfgjFNO5J92fVuPeyq11+Ybr/vc+913fhV33PMgAGuutgovGDUSgP3evgN/uGb6Ite3tZyLNr0aoJPXrMcC97V8ngG8dvGNIuIA4ACAseM27mB3tDSfPfwIPrL/PnzziMPY+lXbMnWf/XrdJWnIpn39A+z4mvGMGb0a08//Cl85+jwm/+MrGL/JeixcmPxl1hwOOuJUoBpg9uMv70Nmcutds/jQl07uce+lJYu+UZFtP3DEnsDkzPzX+vM+wGsz86NL22ebV78mz/vtZR3pj9REW7zh4F53QeqaebefzsInH+pKrrry+uNz7N5HtuVYd39nt6szc2JbDjZEncysZwIbtXweVy+TJKmzfETmoF0JjI+IzSJiJWAq4A28kiQto45l1pk5PyI+ClwAjASOy8ybO9WeJEl9Aigose7spCiZeR5wXifbkCTp7zVn9rF2cLpRSZIazulGJUlFKiixNlhLkspUUhncYC1JKk+UlVl7zVqSpIYzs5YkFSeAESPKSa0N1pKkIlkGlyRJXWNmLUkqkqPBJUlqMkeDS5KkbjKzliQVp3qQRzmptcFaklQgH+QhSZK6yMxaklSkghJrg7UkqUyWwSVJUteYWUuSylPYfdYGa0lScUq7dcsyuCRJDWdmLUkqUkGJtcFaklQmy+CSJKlrzKwlSUUqKLE2WEuSChSWwSVJUheZWUuSilPdZ93rXrSPwVqSVCAfkSlJkrrIzFqSVKSCEmuDtSSpTJbBJUkSABFxXEQ8FBE3tSxbOyIuiog76/+vVS+PiPheREyPiBsiYsJg2jBYS5LKUz8isx2vQTgBmLzYskOAizNzPHBx/RlgV2B8/ToA+NFgGjBYS5KK0/eIzHa8BpKZlwJzFls8BZhWv58G7NGy/KdZuRwYHREbDNSG16wlSUXq8TXr9TNzVv3+AWD9+v1Y4L6W7WbUy2bRD4O1JEn9GxMRV7V8PiYzjxnszpmZEZHD6YDBWpJUpDYm1g9n5sRl3OfBiNggM2fVZe6H6uUzgY1athtXL+uX16wlSUXq1jXrpTgb2Ld+vy/wy5bl769HhW8HPNZSLl8qM2tJkoYhIk4BdqYql88ADgO+AZweEfsD9wLvrjc/D3grMB14EthvMG0YrCVJ5Rn8bVfDlpnvWcqqXZawbQIHLmsbBmtJUnHCB3lIkqRuMrOWJBWpoMTaYC1JKtOIgqK1ZXBJkhrOzFqSVKSCEmuDtSSpPNUTs8qJ1pbBJUlqODNrSVKRRpSTWBusJUllsgwuSZK6xsxaklSkghJrg7UkqTxBNT94KSyDS5LUcGbWkqQiORpckqQmCx+RKUmSusjMWpJUpIISa4O1JKk8gY/IlCRJXWRmLUkqUkGJtcFaklSmkkaDG6wlScWpnmfd6160j9esJUlqODNrSVKRShoNbrCWJBWpnFDdT7COiO8DubT1mXlQR3okSZIW0V9mfVXXeiFJUputEKPBM3Na6+eIWDUzn+x8lyRJGp5qBrNe96J9BhwNHhHbR8QtwG31520i4ocd75kkSQIGd+vWd4G3AI8AZOb1wE6d7JQkScNSPyKzHa8mGNRo8My8b7EOL+hMdyRJao+GxNm2GEywvi8idgAyIl4AfBy4tbPdkiRJfQYTrD8EHAmMBe4HLgAO7GSnJEkarqaUsNthwGCdmQ8De3ehL5IktcWKOBr8JRFxTkTMjoiHIuKXEfGSbnROkiQNbjT4/wCnAxsAGwJnAKd0slOSJA1XSaPBBxOsV83MEzNzfv06CXhhpzsmSdJwRJteTdDf3OBr129/HRGHAKdSzRW+F3BeF/omSZLof4DZ1VTBue+HxQdb1iVwaKc6JUnScESsII/IzMzNutkRSZLaqaBYPbgZzCJia2ArWq5VZ+ZPO9UpSZL0vAGDdUQcBuxMFazPA3YF/gAYrCVJjdWUkdztMJjR4HsCuwAPZOZ+wDbAmh3tlSRJwxTRnlcTDCZYP5WZC4H5EbEG8BCwUWe7JUmS+gzmmvVVETEa+DHVCPHHgcs62itJkoYhiBVjNHifzPxI/fboiDgfWCMzb+hstyRJGoYGlbDbob9JUSb0ty4zr+lMlyRJUqv+Muv/7GddAm9sc18YNSJYZ7WV2n1YqbnGvaLXPZC65+5VutpcSaPB+5sU5Q3d7IgkSe00mBHUy4tBTYoiSdLyJCgrsy7ph4ckSUUys5YkFWlEOYn1wJl1VN4XEV+sP28cEZM63zVJkoZuRLTn1QSDKYP/ENgeeE/9eS5wVMd6JEmSFjGYMvhrM3NCRFwLkJl/jQjvr5IkNVY1r3dD0uI2GEywfjYiRlLdW01ErAss7GivJEkapqaUsNthMGXw7wFnAetFxBFUj8f8Wkd7JUmSnjOYucFPjoirqR6TGcAemXlrx3smSdIwFFQFHzhYR8TGwJPAOa3LMvMvneyYJElDFbBiPXULOJfqenUALwQ2A24HnNRYkiQgIj4B/CtVvLwR2A/YADgVWIfqEdP7ZOYzQzn+gNesM/OVmfmq+v/jgUn4PGtJUsONaNNrIBExFjgImJiZWwMjganAfwDfycwtgL8C+w/nXJZJ/WjM1w61QUmSuiGiPa9BGgWsEhGjgFWBWVRPpzyzXj8N2GOo5zKYa9YHt3wcAUwA7h9qg5IklSQzZ0bEt4G/AE8BF1KVvR/NzPn1ZjOAsUNtYzDXrFdveT+f6hr2z4baoCRJnRYR7RxgNiYirmr5fExmHtPS1lrAFKoxXY8CZwCT29U4DBCs68lQVs/MT7azUUmSOq2Ng8EfzsyJ/ax/E3B3Zs6u2o2fA68DRkfEqDq7HgfMHGoHlnrNum5gQd2gJElasr8A20XEqlHNcboLcAvwW2DPept9gV8OtYH+Mus/UV2fvi4izqZK65/oW5mZPx9qo5IkdVq3phvNzCsi4kzgGqrLxdcCx1BdNj41Ir5aLzt2qG0M5pr1C4FHqEa19d1vnYDBWpLUSN2eFCUzDwMOW2zxn6ludx62/oL1evVI8Jt4Pkg/1692NC5JkgbWX7AeCazGokG6j8FaktRoBc022m+wnpWZX+5aTyRJapdYcR6RWdBpSpK0/Oovs96la72QJKnNoqCcc6nBOjPndLMjkiS1SzUavNe9aJ9lfpCHJEnqrsHcZy1J0nKnpMzaYC1JKlIUdO+WwVqSVByvWUuSpK4ys5YklSdWnBnMJElabnXzQR6dZhlckqSGM7OWJBWntAFmBmtJUpEKqoJbBpckqenMrCVJBQpGrAgP8pAkaXkVWAaXJEldZGYtSSpPOBpckqTGc1IUSZLUNWbWkqTilDbAzGAtSSqSZXBJktQ1ZtaSpCIVlFgbrCVJ5QnKKh2XdC6SJBXJzFqSVJ6AKKgObrCWJBWpnFBtGVySpMYzs5YkFSco6z5rg7UkqUjlhGrL4JIkNZ6ZtSSpSAVVwQ3WkqQShbduSZLUZM5gJkmSusrMWpJUJMvgkiQ1XDmh2jK4JEmNZ2YtSSqPD/KQJKnZHA0uSZK6ysxaklQky+CSJDVcOaHaMrgkSY1nZi1JKlJBVXCDtSSpPNVo8HKitWVwSZIazsxaklQky+CSJDVaEJbBJUlSt5hZS5KKZBlckqQGczS4JEnqKjNrSVJ5wjK4JEmNV1KwtgwuSVLDmVlLkorkfdaSJDVYACOiPa9BtRcxOiLOjIjbIuLWiNg+ItaOiIsi4s76/2sN9XwM1pIkDd+RwPmZuSWwDXArcAhwcWaOBy6uPw+JwVqSVKRo038DthOxJrATcCxAZj6TmY8CU4Bp9WbTgD2Gei4Ga0lSkSLa8wLGRMRVLa8DFmtqM2A2cHxEXBsRP4mIFwHrZ+asepsHgPWHei4OMJMkqX8PZ+bEftaPAiYAH8vMKyLiSBYreWdmRkQOtQMG6xXI008/zZvesBPPzJvH/AXzefs79uQLh32Je+6+m332nsqcOY/w6gmv4bgTTmSllVbqdXelITn6oJ3Z9R82ZfZjTzHxo6cB8LX9tuetkzbhmWcXcvcDj3HAkb/lsSeeYerrx/P/3rHtc/u+ctN12P7/ncENdz/Sq+6rjbo4GnwGMCMzr6g/n0kVrB+MiA0yc1ZEbAA8NNQGLIOvQFZeeWXOv+g3/Oma67niquu48ILzueLyy/ncZz/Dxz7+CW6+bTprjV6LE447ttddlYbsxItvZ8rhv1pk2cXX3cdrDjyNSQedzp0zH+NTe04A4NTf3cl2Hz+D7T5+Bvv/18Xc8+DfDNSF6OZo8Mx8ALgvIl5WL9oFuAU4G9i3XrYv8Muhno/BegUSEay22moAPPvss8x/9lkigt/99je84517ArD3Pvtyztm/6GU3pWH5482zmDN33iLLLr52BgsWVhXIP93+IGPHvOjv9nv3TuM54/fTu9JHdUO7hpcNOjv/GHByRNwAbAt8DfgG8OaIuBN4U/15SCyDr2AWLFjADpNew113TeeDHz6Ql2y+OWuOHs2oUdVfhbHjxnH//TN73Eupc97/5i05cwlBec8dN+ddXz2/Bz1SCTLzOmBJ17V3acfxO5ZZR8RxEfFQRNzUqTa07EaOHMkVV1/H9HtmcNWVf+L2227rdZekrvn0uyewYMFCTr3kzkWW/8NL1+PJefO55S9zetQztV2bRoI3ZX7xTpbBTwAmd/D4GobRo0fz+p3fwBVXXMZjjz7K/PnzAZg5YwYbbji2x72T2u99u7yMt/7DJnzgPy/+u3Xv2mkLTr/UEnhpok2vJuhYsM7MSwF/pjbI7NmzefTRRwF46qmnuPh/L2LLLV/OTju/gZ//7EwATj5xGru/bUovuym13ZsnbMTB79iWPb/ya56aN3+RdRHwzn/cnDMuvXMpe0u95zXrFcgDs2bxb/+yLwsWLGBhLuSde76bt+62Oy9/+Vbss/dUvnTY59lm21fzgX/Zv9ddlYZs2iffxI6v3JAxa7yQ6cfvw1f+50o+tecEVn7BSH71lbcB1SCzg354KQD/+IoNmTH7Ce55cG4vu602q0aDNyUvHr7IHPI92gMfPGJT4FeZuXU/2xwAHACw0cYbv+aOu+7tWH+kplnr7T/qdRekrpn3+2+w8NF7uxJBX/7KV+fxZ/22LcfafvxaVw8wKUrH9fzWrcw8JjMnZubEdces2+vuSJLUOJbBJUllKqcK3tFbt04BLgNeFhEzIsILoZKkrunypCgd1bHMOjPf06ljS5K0IrEMLkkqUkGDwQ3WkqQyFRSrez8aXJIk9c/MWpJUpoJSa4O1JKk41bze5URry+CSJDWcmbUkqTwNerxlOxisJUlFKihWWwaXJKnpzKwlSWUqKLU2WEuSCtSceb3bwTK4JEkNZ2YtSSqSo8ElSWqwoKhL1pbBJUlqOjNrSVKZCkqtDdaSpCKVNBrcYC1JKlJJA8y8Zi1JUsOZWUuSilRQYm2wliQVqLB7tyyDS5LUcGbWkqQiORpckqQGCxwNLkmSusjMWpJUpIISa4O1JKlQBUVry+CSJDWcmbUkqUiOBpckqeEcDS5JkrrGzFqSVKSCEmuDtSSpUAVFa8vgkiQ1nJm1JKk41UO3ykmtDdaSpPKEo8ElSVIXmVlLkopUUGJtsJYkFaqgaG0ZXJKkhjOzliQVKBwNLklS0zkaXJIkdY2ZtSSpOEFR48sM1pKkQhUUrQ3WkqQilTTAzGvWkiQ1nJm1JKlIJY0GN1hLkopUUKy2DC5JUtOZWUuSyuMjMiVJWh5Em16DbC1iZERcGxG/qj9vFhFXRMT0iDgtIlYa6pkYrCVJao+PA7e2fP4P4DuZuQXwV2D/oR7YYC1JKk5QlcHb8RpUexHjgN2An9SfA3gjcGa9yTRgj6Gej9esJUlF6vIl6+8CnwZWrz+vAzyamfPrzzOAsUM9uJm1JEn9GxMRV7W8DmhdGRG7Aw9l5tWd6oCZtSSpSG0cDf5wZk7sZ/3rgH+OiLcCLwTWAI4ERkfEqDq7HgfMHGoHzKwlSUWKNv03kMw8NDPHZeamwFTgN5m5N/BbYM96s32BXw71XAzWkiR1xmeAgyNiOtU17GOHeiDL4JKkMvVgUpTMvAS4pH7/Z2BSO45rsJYkFamgCcwsg0uS1HRm1pKk4izLhCbLA4O1JKlIgxnJvbywDC5JUsOZWUuSylROYm2wliSVqaBYbRlckqSmM7OWJBXJ0eCSJDXa4Ob1Xl5YBpckqeHMrCVJxQnKKoObWUuS1HBm1pKkIplZS5KkrjGzliQVqaTR4AZrSVJ5CnvqlmVwSZIazsxaklScoKy5wQ3WkqQyFRStLYNLktRwZtaSpCI5GlySpIZzNLgkSeoaM2tJUpEKSqwN1pKkQhUUrS2DS5LUcGbWkqQiORpckqQGC8oaDR6Z2es+PCciZgP39rofK6AxwMO97oTURf6d741NMnPdbjQUEedT/Tm3w8OZOblNxxqSRgVr9UZEXJWZE3vdD6lb/Duv5Y0DzCRJajiDtSRJDWewFsAxve6A1GX+nddyxWvWkiQ1nJm1JEkNZ7CWJKnhDNYrsIiYHBG3R8T0iDik1/2ROi0ijouIhyLipl73RVoWBusVVESMBI4CdgW2At4TEVv1tldSx50A9HRyC2koDNYrrknA9Mz8c2Y+A5wKTOlxn6SOysxLgTm97oe0rAzWK66xwH0tn2fUyyRJDWOwliSp4QzWK66ZwEYtn8fVyyRJDWOwXnFdCYyPiM0iYiVgKnB2j/skSVoCg/UKKjPnAx8FLgBuBU7PzJt72yupsyLiFOAy4GURMSMi9u91n6TBcLpRSZIazsxakqSGM1hLktRwBmtJkhrOYC1JUsMZrCVJajiDtVYYEbEgIq6LiJsi4oyIWHUYxzohIvas3/+kv4egRMTOEbHDENq4JyLGDHb5Yts8voxtHR4Rn1zWPkrqDoO1ViRPZea2mbk18AzwodaVETFqKAfNzH/NzFv62WRnYJmDtST1MVhrRfV7YIs66/19RJwN3BIRIyPiWxFxZUTcEBEfBIjKD+rnf/8vsF7fgSLikoiYWL+fHBHXRMT1EXFxRGxK9aPgE3VWv2NErBsRP6vbuDIiXlfvu05EXBgRN0fET4AY6CQi4hcRcXW9zwGLrftOvfziiFi3XnSgYWMAAAlTSURBVLZ5RJxf7/P7iNiyHV+mpM4aUiYhLc/qDHpX4Px60QRg68y8uw54j2XmP0TEysAfI+JC4NXAy6ie/b0+cAtw3GLHXRf4MbBTfay1M3NORBwNPJ6Z3663+x/gO5n5h4jYmGoWuZcDhwF/yMwvR8RuwGBm1/qXuo1VgCsj4meZ+QjwIuCqzPxERHyxPvZHgWOAD2XmnRHxWuCHwBuH8DVK6iKDtVYkq0TEdfX73wPHUpWn/5SZd9fL/wl4Vd/1aGBNYDywE3BKZi4A7o+I3yzh+NsBl/YdKzOX9tzkNwFbRTyXOK8REavVbbyj3vfciPjrIM7poIh4e/1+o7qvjwALgdPq5ScBP6/b2AE4o6XtlQfRhqQeM1hrRfJUZm7buqAOWk+0LgI+lpkXLLbdW9vYjxHAdpn59BL6MmgRsTNV4N8+M5+MiEuAFy5l86zbfXTx70BS83nNWlrUBcCHI+IFABHx0oh4EXApsFd9TXsD4A1L2PdyYKeI2Kzed+16+Vxg9ZbtLgQ+1vchIvqC56XAe+tluwJrDdDXNYG/1oF6S6rMvs8IoK868F6q8vrfgLsj4l11GxER2wzQhqQGMFhLi/oJ1fXoayLiJuC/qSpQZwF31ut+SvXkpkVk5mzgAKqS8/U8X4Y+B3h73wAz4CBgYj2A7RaeH5X+JapgfzNVOfwvA/T1fGBURNwKfIPqx0KfJ4BJ9Tm8EfhyvXxvYP+6fzcDUwbxnUjqMZ+6JUlSw5lZS5LUcAZrSZIazmCtFUZErBwRp0XE9Ii4op6wZGnbjoyIayPiVy3L3lhPeHJTREzrm/EsIj5VX4/um8p0Qd/gsnqSlNvrNg9p47n0O8XpUvbZtL6G3TURcWh97rdHxFuWss0JEXF3y3e4bb08IuJ79f43RMSEevkm9Z/DdfWkLx9qOdZrIuLGep/vxbIOsZcaymCtnoohTvE5RPtTjZ7eAvgO8B/9bPtx4Na+DxExApgGTK2nK70X2BcgM79VT2O6LXAo8Lt6opKRwFFUE7BsBbxnWQPs0gxiitOeq891KvAKYDLww/o7WZJP9X2Hmdl3L/yuVPeNj6cauPejevksqtvVtgVeCxwSERvW634E/FvLfpPbfFpSTxistUSxlGksY7HpNOtlq0XE8XVGc0NEvLNe/njLfntGxAn1+xMi4uiIuAL4ZkRMiojL6kz2/yLiZfV2IyPi23W2ekNEfKzObn/Rctw3R8RZgzytKVQBF+BMYJclZV4RMQ7YjWpkeJ91gGcy847680XAO5fQxnuAU+r3k4DpmfnnzHwGOLXuAxHx5Yj45yW0fXidtf8+Iu6NiHdExDfr7/b8eP6WsksiYmL9HZ1Qf0c3RsQn6vVbRMT/1n9O10TE5ou1s2ndxjX1a4d6+QYRcWlLlWDHpbUxCFOAUzNzXj1RzPT6OxmsKcBPs3I5MDoiNsjMZzJzXr3NytT/jkV1S90amXl5ViNnfwrssQztSY3lpChamr+bxpLqH8VFptOst/0C1RSdrwSIiIHuDwYYB+yQmQsiYg1gx8ycHxFvAr5GFQgPADYFtq3XrQ38lSpDW7e+VWo/6mk/I+I0qilBF/dfmflTYCxwH0B9vMeogvDDi23/XeDTLHpv9MNUt0lNzMyrqO5h3qh1p6ie4jWZalpPWturzaDKBMnML/bz3WxOdR/3VlS3iL0zMz9d/yjZDfhFy7bbAmPrbJ+IGF0vPxn4RmaeFREvpPqzW69lv4eAN2fm0xExnuoHxkSqe7IvyMwj6ix41aW1ERGforoVbHGXZuZB9fm33k42o162JEdENS3qxcAhdTBe0vc3FpgVERsB5wJbUGXl90c1P/uMQbYnLVcM1lqaJU1juS5Lnk7zTVTlTurlg5km84x66k6oJveYVgeNBF7QctyjM3N+a3sRcSLwvog4HtgeeH+9fq+hnGiriNgdeCgzr45qhrC+c8qImAp8J6o5wy8EFiy2+9uAP/Yzzehg/Tozn42IG4GRPD+H+Y1UP15a/Rl4SUR8nyp4XRgRq1MF17Pqvj9dn1vrfi8AfhDV9eEFwEvr5VcCx9UZ/C8y87qI+Ls26uN+C/jWMM8VqksHDwArUc1d/hmevy98iTLzPqppYTcEfhERZ7ahH1JjWQbX34lFp7HcBriWpU9j2Z/Wm/gX3791is+vAL+tM7e3DaKt44H3UZWcz+gL5lENHrtuCa/31/vNpM6Go7pWvibVPNqtXgf8c0TcQ1W2fmNEnASQmZdl5o6ZOYlqtrE7Ftt3Ks+XwBdprzauXjaQeXV7C4Fn8/nJEBay2A/s+ofRNsAlVJOrtJbu+/MJ4MF634lUgZLMvJRqjvKZwAkR8f6ltRGLDqxrfX1vWc4/M2fVpe55VH+2kwa7f2beD9wE7FivGzdQe9LyyGCtJVnaNJZLm07zIuDAvp1byuAPRsTLoxqc1ZelL629vn9UP9Cy/CLgg/H8qOu14bl/oO8HPk/1jzv18r1aBim1vn5ab3I29aAwqjL2b1oCYd8xDs3McZm5KVXw/U1mvq9uf736/ytTZX9Ht5zzmsDrgV+2HO5KYHxEbBYRK9XHO7ve/ustlYshi4gxwIjM/Fn9fUzIzLnAjIjYo6+/dYm+1ZrArPoHwT5UGTwRsQnwYGb+mCooT1hSG/V39a2lfN8H1W2cDUyt29+MqjrzpyWcwwb1/4PqGvNNLfu/PyrbUV1qmRUR4+rLM31/1/4RuD0zZwF/i4jt6mO9n0X/PKTllsFaS7LEaSz7mU7zq8Ba9QCk63l+3uxDgF8B/0c1gndpvgl8PSKuZdHM8SdUU27eUB/3vS3rTgbuy8xbGbxjgXUiYjpwcN0/ImLDiDhvEPt/qv5ObgDOyczWJ2+9HbgwM5+rGNQZ/0ep5hu/FTg9M2+uV7+SqvQ7XGOBS6J6mthJVCVlqALwQRFxA9X3/+LF9vshsG/9vW7J85WOnYHr6z+LvYAj+2mjX/W5nk41Rev5wIF9lz4i4rx4fgT3yXXJ/0ZgDNXfJ4DzqMr806nGSnykXv5y4Iq6778Dvp2ZN9brPkL192Y6cBfw68H0VWo6pxvVcikifgBcm5nH9rovQxERF2TmEu87lqTFGay13ImIq6kywTe33MIjScUyWEuS1HBes5YkqeEM1pIkNZzBWpKkhjNYS5LUcAZrSZIazmAtSVLD/X/5eHLV5Kq1hQAAAABJRU5ErkJggg==","text/plain":["<Figure size 576x432 with 2 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"}],"source":["# Results evaluation: \n","# Confusion Matrix plot\n","from sklearn import metrics\n","from sklearn.metrics import confusion_matrix \n","from sklearn.metrics import accuracy_score \n","from sklearn.metrics import classification_report \n","#Plotting of the Matrix confusion\n","def plot_confusion_matrix(cm,\n","                          title='Confusion matrix',\n","                          cmap=None,\n","                          normalize=True):\n","  \n","    import matplotlib.pyplot as plt\n","    import numpy as np\n","    import itertools\n"," \n","    accuracy = np.trace(cm) / float(np.sum(cm))\n","    misclass = 1 - accuracy\n","    cmap = plt.get_cmap('Blues')\n"," \n","    plt.figure(figsize=(8, 6))\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n"," \n","    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","      plt.text(j, i, \"{:,}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n"," \n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xticks(range(0,2),)\n","    plt.yticks(range(0,2),)\n","    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n","    plt.show()\n"," \n","y_pred=ckmodel.predict(test_img_4b)\n","for i in range(len(test_lab_4b)):\n","  if y_pred[i] <= 0.5:\n","    y_pred[i]=0\n","  else:\n","    y_pred[i]=1\n","conf_mtx = confusion_matrix(test_lab_4b,y_pred) \n","plot_confusion_matrix(conf_mtx,normalize=False)"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"colab_type":"code","executionInfo":{"elapsed":66208,"status":"ok","timestamp":1590222259944,"user":{"displayName":"Giorgio Simonini","photoUrl":"","userId":"05015077520643263821"},"user_tz":-120},"id":"RMQE2UZTittQ","outputId":"8e5f16bc-7920-494f-eaf1-320fbf2fb0d1"},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light","tags":[]},"output_type":"display_data"}],"source":["# Results evaluation: \n","# ROC Curve plot\n","fpr,tpr,th = metrics.roc_curve(test_lab_4b,y_pred)\n","# Sensitivty = TPR(True Positive Rate)= Recall = TP/(TP+FN)\n","# (1 - Specificity) = FPR(False Positive Rate)= FP/(TN+FP)\n"," \n","roc_auc = metrics.roc_auc_score(test_lab_4b,y_pred)\n","from matplotlib import pyplot as plt\n","plt.figure()\n","plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\n","plt.plot([0, 1], [0, 1], color='navy', linestyle='--')\n","plt.xlim([0.0, 1.0])\n","plt.ylim([0.0, 1.0])\n","plt.xlabel('False Positive Rate')\n","plt.ylabel('True Positive Rate')\n","plt.title('Receiver operating characteristic')\n","plt.legend(loc=\"lower right\")\n","plt.show()"]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyNr8Ryp1TgzKnstBb5WDTnL","collapsed_sections":[],"name":"Task4_baseline.ipynb","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
